<div id="a1"> <h2>进入/离开 &amp; 列表过渡</h2> </div> <div id="a2"> <h3>概述</h3> <p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。<br /> 包括以下工具：<br /> 在 CSS 过渡和动画中自动应用 class<br /> 可以配合使用第三方 CSS 动画库，如 Animate.css<br /> 在过渡钩子函数中使用 JavaScript 直接操作 DOM<br /> 可以配合使用第三方 JavaScript 动画库，如 Velocity.js<br /> 在这里，我们只会讲到进入、离开和列表的过渡，你也可以看下一节的 管理过渡状态。</p> </div> <div id="a3"> <h3>单元素/组件的过渡</h3> <p>Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加 entering/leaving 过渡</p> <ul> <li>条件渲染 (使用 v-if)</li> <li>条件展示 (使用 v-show)</li> <li>动态组件</li> <li>组件根节点</li> </ul> <p>这里是一个典型的例子：</p> <pre><code class="lang-">&lt;div id=&quot;demo&quot;&gt;&lt;br&gt; &lt;button v-on:click=&quot;show = !show&quot;&gt;&lt;br&gt; Toggle&lt;br&gt; &lt;/button&gt;&lt;br&gt; &lt;transition name=&quot;fade&quot;&gt;&lt;br&gt; &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;&lt;br&gt; &lt;/transition&gt;&lt;br&gt; &lt;/div&gt;&lt;br&gt; new Vue({&lt;br&gt; el: '#demo',&lt;br&gt; data: {&lt;br&gt; show: true&lt;br&gt; }&lt;br&gt; })&lt;br&gt; .fade-enter-active, .fade-leave-active {&lt;br&gt; transition: opacity .5s&lt;br&gt; }&lt;br&gt; .fade-enter, .fade-leave-to /* .fade-leave-active in &lt;br&gt;below version 2.1.8 */ {&lt;br&gt; opacity: 0&lt;br&gt; }&lt;br&gt; </code></pre> </div> <div id="a4"> <h3>CSS 过渡</h3> <p>常用的过渡都是使用 CSS 过渡。</p> <p>下面是一个简单例子：</p> <pre><code class="lang-">&lt;div id=&quot;example-1&quot;&gt;&lt;br&gt; &lt;button @click=&quot;show = !show&quot;&gt;&lt;br&gt; Toggle render&lt;br&gt; &lt;/button&gt;&lt;br&gt; &lt;transition name=&quot;slide-fade&quot;&gt;&lt;br&gt; &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;&lt;br&gt; &lt;/transition&gt;&lt;br&gt; &lt;/div&gt;&lt;br&gt; </code></pre> <pre><code class="lang-">new Vue({&lt;br&gt; el: '#example-1',&lt;br&gt; data: {&lt;br&gt; show: true&lt;br&gt; }&lt;br&gt; })&lt;br&gt; </code></pre> </div> <div id="a5"> <h2>混合</h2> </div> <div id="a6"> <h3>基础</h3> <p>混合 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混合对象可以包含任意组件选项。当组件使用混合对象时，所有混合对象的选项将被混入该组件本身的选项。</p> <p>例子：</p> <pre><code class="lang-">// 定义一个混合对象 var myMixin = {&lt;br&gt; created: function () {&lt;br&gt; this.hello()&lt;br&gt; },&lt;br&gt; methods: {&lt;br&gt; hello: function () {&lt;br&gt; console.log('hello from mixin!')&lt;br&gt; }&lt;br&gt; }&lt;br&gt; }&lt;br&gt; // 定义一个使用混合对象的组件&lt;br&gt; var Component = Vue.extend({&lt;br&gt; mixins: [myMixin]&lt;br&gt; })&lt;br&gt; var component = new Component() // =&gt; &quot;hello from &lt;br&gt;mixin!&quot;&lt;br&gt; </code></pre> </div> <div id="a7"> <h3>选项合并</h3> <p>当组件和混合对象含有同名选项时，这些选项将以恰当的方式混合。比如，同名钩子函数将混合为一个数组，因此都将被调用。另外，混合对象的 钩子将在组件自身钩子 之前 调用 ：</p> <pre><code class="lang-">var mixin = {&lt;br&gt; created: function () {&lt;br&gt; console.log('混合对象的钩子被调用')&lt;br&gt; }&lt;br&gt; }&lt;br&gt; new Vue({&lt;br&gt; mixins: [mixin],&lt;br&gt; created: function () {&lt;br&gt; console.log('组件钩子被调用')&lt;br&gt; }&lt;br&gt; })&lt;br&gt; // =&gt; &quot;混合对象的钩子被调用&quot;&lt;br&gt; // =&gt; &quot;组件钩子被调用&quot;&lt;br&gt; </code></pre> </div>